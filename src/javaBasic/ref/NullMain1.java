/// null
// 택배를 보낼 때 제품은 준비가 된었지만, 보낼 주소지가 아직 결정되지 않아서, 주소지가 결정될 때 까지는 주소지를 비워두어야 할 수 있다.
// 참조형 변수에는 항상 객체가 있는 위치를 가리키는 참조값이 들어간다.
// 그런데 아직 가리키는 대상이 없거나, 가리키는 대상을 나중에 입력하고 싶다면 어떻게 해야할까?
// 참조형 변수에서 아직 가리키는 대상이 없다면 null 이라는 튿별한 값을 넣어둘 수 있다.
// null 은 값이 존재하지 않는, 없다는 뜻이다.

// 자바에서는 참조형에만 null 을 사용할 수 있다.

package javaBasic.ref;

public class NullMain1 {
    public static void main(String[] args) {
        Data data = null;
        System.out.println("1. data = " + data);
        data = new Data();
        System.out.println("2. data = " + data);
        data = null;
        System.out.println("3. data = " + data);
    }
}

// Data 타입을 받을 수 있는 참조형 변수 data 를 만들었다. 그리고 려기에 null 값을 할당했다.
// 따라서 data 변수레는 아직 가리키는 객체가 없다는 뜻이다.

/// GC(GarbageCollection) - 아무도 참조하지 않는 인스턴스의 최후, 청소부
// data 에 null 을 할당했다. 따라서 앞서 생성한 x001 Data 인스턴스를 더는 아무도 참조하지 않는다.
// 이렇게 아무도 참조하지 않게 되면 x001 이라는 참조값을 다시 구할 방법이 없다.
// 따라서 해당 인스턴스에 다시 접근할 방법이 없다.
// 이렇게 아무도 참조하지 않는 인스턴스는 사용되지 않고 메모리 용량만 차지할 뿐이다.
// C와 같은 과거 프로그래밍 언어는 개발자가 직접 명령어를 사용해서 인스턴스를 메모리에서 제거해야 했다.
// 만약 실수로 인스턴스 삭제를 누락하면 메오리에 사용하지 않는 객체가 가득해져서 메모리 부족 오류가 발생하게 된다.
// 자바는 이런 과정을 자동으로 처리해준다.
// 아무도 참조하지 않는 인스턴스가 있으면 JVM 의 GC(가비지 컬렉션)가 더이상 사용하지 않는 인스턴스를 판단하고 해당 인스턴스를 자동으로 제거 해준다.
// 객체는 해당 객체를 참조하는 곳이 있으면, JVM 이 종료될 때 까지 계속 생존한다.
// 그런데 중간에 해당 객체를 참조하는 곳이 모두 사라지면 그때 JVM 른 필요 없는 객체로 판단하고 GC 를 사용해 제거한다.
