package javaStart.method;

public class MethodArrangement {
}

// 정리
// 변수명 vs 메서드명
// 변수 이름은 일반적으로 명사를 사용한다.
// 한편 메서드는 무언가를 동작하는데 사용하기 때문에 일반적으로 동사로 시작한다.
// 이런 차이점 외에는 변수 이름과 메서드 이름에 대한 규칙은 같다.
// - 변수명 예): customerName, totalSum, employeeCount, isAvailable
// - 메서드명 예): printReport(), calculateSum(), addCustomer(), getEmployeeCount(), setEmployeeName()

// 메서드 사용의 장점
// - 코드 재사용: 메서드는 특정 기능을 캡슐화하므로,
//              필요할 때마다 그 기능을 다시 작성할 필요 없이 해당 메서드를 호출함으로써 코드를 재사용할 수 있다.
// - 코드의 가독성: 이름이 부여된 메서드는 코드가 수행하는 작업을 명확하게 나타내므로, 코드를 읽는 사람에게 추가적인 문맥을 제공한다.
// - 모듈성: 큰 프로그램을 작은, 관리 가능한 부분으로 나눌 수 있다. 이 코드의 가독성을 향상시키고 디버깅을 쉽게 만든다.
// - 코드 유지 관리: 메서드를 사용하면, 코드의 특정 부분에서 문제가 발생하거나 업데이트가 필요한 경우 해당 메서드만 수정하면 된다.
//                 이렇게 하면 전체 코드 베이스에 영향을 주지 않고 변경사항을 적용할 수 있다.
// - 재사용성과 확장성: 잘 설계된 메서드는 다른 프로그램이나 프로젝트에서도 재사용할 수 있으며,
//                   새로운 기능을 추가하거나 기존 기능을 확장하는데 유용하다.
// - 추상화: 메서드를 사용하는 곳에서는 메서드의 구현을 몰라도 된다.
//          프로그램의 다른 부분에서는 복잡한 내부 작업에 대해 알 필요 없이 메서드를 사용할 수있다.
// - 테스트와 디버깅 용이성: 개별 메서드는 독립적으로 테스트하고 디버그할 수 있다.
//                       이는 코드의 문제를 신속하게 찾고 수정하는 데 도움이 된다.

// 따라서, 메서드는 효율적이고 유지 보수가 가능한 코드를 작성하는데 매우 중요한 도구이다.

// 그리고 계속 배우고 개발을 하다보면 점점 복잡한 상상을 하게 되는데
// 이런 생각을 하게된 것부터 잘못된 것이다. 개발은 무조건 단순해야 한다. 우지보수가 쉬워야하기 때문이다.
